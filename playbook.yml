- name: Crear VM en GCP e instalar Jenkins
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    project_id: "{{ lookup('env','GCP_PROJECT_ID') }}"
    zone: "{{ lookup('env','GCP_ZONE') }}"
    instance_name: "jenkins-vm"
    machine_type: "e2-micro"  # or "f1-micro" if preferred
    image_family: "debian-11"  # Linux image in GCP
  tasks:
    - name: Crear instancia en GCP (Linux)
      gcp_compute_instance:
        name: "{{ instance_name }}"
        machine_type: "{{ machine_type }}"
        zone: "{{ zone }}"
        project: "{{ project_id }}"
        auth_kind: serviceaccount
        service_account_file: "/tmp/gcloud_service_account.json"
        disks:
          - auto_delete: true
            boot: true
            initialize_params:
              source_image: "projects/debian-cloud/global/images/family/{{ image_family }}"
        scopes:
          - "https://www.googleapis.com/auth/cloud-platform"
        metadata: {}
        network_interfaces:
          - network:
              name: "global/networks/default"
            access_configs:
              - name: "External NAT"
                type: "ONE_TO_ONE_NAT"
      register: vm_info

    - name: Esperar a que la instancia esté en estado RUNNING
      pause:
        seconds: 1

    - name: Obtener IP de la instancia usando gcloud CLI
      shell: |
        gcloud auth activate-service-account --key-file=/tmp/gcloud_service_account.json
        gcloud compute instances describe {{ instance_name }} --zone={{ zone }} --project={{ project_id }} --format="get(networkInterfaces[0].accessConfigs[0].natIP)"
      register: instance_ip

    - name: Imprimir la IP de la instancia
      debug:
        msg: "La IP de la instancia es: {{ instance_ip.stdout }}"

    - name: Agregar la instancia creada al inventario dinámico
      add_host:
        name: jenkins-vm
        ansible_host: "{{ instance_ip.stdout }}"
        ansible_user: "alfonso_cloud_eng"

- name: Check environment on the VM
  hosts: jenkins-vm
  gather_facts: no
  become: yes
  tasks:
    - name: Show /etc/os-release and list /usr/bin
      shell: |
        echo "=== /etc/os-release ==="
        cat /etc/os-release || true
        echo "=== Checking apt-get ==="
        which apt-get || true
        echo "=== Listing /usr/bin ==="
        ls /usr/bin || true
      args:
        executable: /bin/bash
      register: env_debug

    - debug:
        var: env_debug.stdout

- name: Configurar Jenkins en la VM (Alpine Linux)
  hosts: jenkins-vm
  become: yes
  gather_facts: yes
  vars:
    ansible_ssh_user: "alfonso_cloud_eng"   # Replace with your actual SSH username on the VM
    job_name: "my_jenkins_job"              # Customize the Jenkins job name as needed
  tasks:
    - name: Instalar dependencias en Alpine (OpenJDK, Python3, pip, wget, etc.)
      shell: |
        apk update
        apk add openjdk11 python3 py3-pip wget bash
      args:
        executable: /bin/sh

    - name: Crear directorio para Jenkins
      file:
        path: /opt/jenkins
        state: directory

    - name: Descargar y ejecutar Jenkins WAR en segundo plano
      shell: |
        cd /opt/jenkins
        # Descarga la versión estable del WAR (ajusta la versión si lo deseas)
        wget https://get.jenkins.io/war-stable/2.387.3/jenkins.war -O jenkins.war
        # Ejecuta Jenkins en el puerto 8080 de forma desatendida
        nohup java -jar jenkins.war --httpPort=8080 &
      args:
        executable: /bin/sh

    # (Opcional) Esperar unos segundos para dar tiempo a Jenkins a iniciar
    - name: Esperar 20 segundos para que Jenkins inicie
      pause:
        seconds: 20

    - name: Crear directorio para el proyecto
      file:
        path: /home/{{ ansible_ssh_user }}/myapp
        state: directory

    - name: Descargar main.py desde repositorio público de GitHub
      shell: |
        cd /home/{{ ansible_ssh_user }}/myapp
        wget https://raw.githubusercontent.com/alfonso-cloud-eng/python-automation-gitlab-jenkins-ansible/main/main.py -O main.py
      args:
        executable: /bin/sh

    - name: Descargar Jenkinsfile desde repositorio público de GitHub
      shell: |
        cd /home/{{ ansible_ssh_user }}/myapp
        wget https://raw.githubusercontent.com/alfonso-cloud-eng/python-automation-gitlab-jenkins-ansible/main/Jenkinsfile -O Jenkinsfile
      args:
        executable: /bin/sh

    # --- Steps to create the Jenkins job automatically ---
    - name: Leer contenido del Jenkinsfile
      slurp:
        src: /home/{{ ansible_ssh_user }}/myapp/Jenkinsfile
      register: jenkinsfile_raw

    - name: Decodificar contenido del Jenkinsfile
      set_fact:
        jenkinsfile_content: "{{ jenkinsfile_raw.content | b64decode }}"

    - name: Renderizar configuración del job en Jenkins
      ansible.builtin.copy:
        dest: /tmp/job_config.xml
        content: |
          <?xml version='1.1' encoding='UTF-8'?>
          <flow-definition plugin="workflow-job@2.40">
            <actions/>
            <description>Job creado automáticamente</description>
            <keepDependencies>false</keepDependencies>
            <properties/>
            <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.92">
              <!-- Manually escape <, >, & -->
              <script>{{ jenkinsfile_content
                | replace('<', '&lt;')
                | replace('>', '&gt;')
                | replace('&', '&amp;') }}</script>
              <sandbox>true</sandbox>
            </definition>
            <triggers/>
            <disabled>false</disabled>
          </flow-definition>
        template: yes


    - name: Crear job pipeline en Jenkins
      shell: |
        # Obtener crumb de Jenkins (asumiendo que CSRF está habilitado)
        CRUMB=$(curl -s 'http://localhost:8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')
        # Crear el job en Jenkins usando la configuración XML generada
        curl -X POST "http://localhost:8080/createItem?name={{ job_name }}" \
          -H "$CRUMB" \
          -H "Content-Type: application/xml" \
          --data-binary @/tmp/job_config.xml
      args:
        executable: /bin/sh
