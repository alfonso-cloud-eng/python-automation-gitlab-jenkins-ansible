- name: Crear VM en GCP e instalar Jenkins
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    project_id: "{{ lookup('env','GCP_PROJECT_ID') }}"
    zone: "{{ lookup('env','GCP_ZONE') }}"
    instance_name: "jenkins-vm"
    machine_type: "e2-micro"  # o "f1-micro" si prefieres
    image_family: "debian-11"  # Imagen Linux en GCP
  tasks:
    - name: Crear instancia en GCP (Linux)
      gcp_compute_instance:
        name: "{{ instance_name }}"
        machine_type: "{{ machine_type }}"
        zone: "{{ zone }}"
        project: "{{ project_id }}"
        auth_kind: serviceaccount
        service_account_file: "/tmp/gcloud_service_account.json"
        disks:
          - auto_delete: true
            boot: true
            initialize_params:
              source_image: "projects/debian-cloud/global/images/family/{{ image_family }}"
        network_interfaces:
          - network: default
            access_configs:
              - name: External NAT
                type: ONE_TO_ONE_NAT
      register: vm_info

    - name: Esperar a que la instancia esté en estado RUNNING
      pause:
        seconds: 60

- name: Configurar Jenkins en la VM (Linux)
  hosts: jenkins-vm
  become: yes
  gather_facts: yes
  vars:
    ansible_ssh_user: "tu_usuario_linux"  # Reemplázalo por el usuario correcto en la VM
    job_name: "pipeline_job"              # Nombre del job que se creará en Jenkins
  tasks:
    - name: Actualizar repositorios APT
      apt:
        update_cache: yes

    - name: Instalar dependencias necesarias (Java para Jenkins, wget, etc.)
      apt:
        name:
          - openjdk-11-jdk
          - wget
          - python3
          - python3-pip
        state: present

    - name: Instalar Jenkins (usando repositorio oficial)
      shell: |
        curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
        sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
        sudo apt-get update
        sudo apt-get install -y jenkins
      args:
        executable: /bin/bash

    - name: Iniciar Jenkins y habilitar arranque automático
      service:
        name: jenkins
        state: started
        enabled: yes

    - name: Crear directorio para el proyecto
      file:
        path: /home/{{ ansible_ssh_user }}/myapp
        state: directory

    - name: Descargar main.py desde repositorio público de GitHub
      shell: |
        cd /home/{{ ansible_ssh_user }}/myapp
        wget https://raw.githubusercontent.com/alfonso-cloud-eng/python-automation-gitlab-jenkins-ansible/main/main.py -O main.py
      args:
        executable: /bin/bash

    - name: Descargar Jenkinsfile desde repositorio público de GitHub
      shell: |
        cd /home/{{ ansible_ssh_user }}/myapp
        wget https://raw.githubusercontent.com/alfonso-cloud-eng/python-automation-gitlab-jenkins-ansible/main/Jenkinsfile -O Jenkinsfile
      args:
        executable: /bin/bash

    # --- Inicio de los pasos para crear el job en Jenkins ---
    # Copia una plantilla XML (en formato Jinja2) que servirá para configurar el job de Jenkins.
    # Esta plantilla define un pipeline en Jenkins utilizando el contenido del Jenkinsfile.
    - name: Copiar plantilla para configuración del job en Jenkins
      copy:
        dest: /tmp/job_config.xml.j2
        content: |
          <?xml version='1.1' encoding='UTF-8'?>
          <flow-definition plugin="workflow-job@2.40">
            <actions/>
            <description>Job creado automáticamente</description>
            <keepDependencies>false</keepDependencies>
            <properties/>
            <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.92">
              <!-- Aquí se inserta el contenido del Jenkinsfile, escapado para XML -->
              <script>{{ jenkinsfile_content | xml_escape }}</script>
              <sandbox>true</sandbox>
            </definition>
            <triggers/>
            <disabled>false</disabled>
          </flow-definition>

    # Lee el contenido del archivo Jenkinsfile que se descargó previamente en la VM.
    # La tarea 'slurp' carga el contenido del archivo en formato base64.
    - name: Leer contenido del Jenkinsfile
      slurp:
        src: /home/{{ ansible_ssh_user }}/myapp/Jenkinsfile
      register: jenkinsfile_raw

    # Decodifica el contenido en base64 para obtener el texto plano del Jenkinsfile.
    - name: Decodificar contenido del Jenkinsfile
      set_fact:
        jenkinsfile_content: "{{ jenkinsfile_raw.content | b64decode }}"

    # Utiliza la plantilla previamente copiada (/tmp/job_config.xml.j2) para generar un archivo XML final
    # (/tmp/job_config.xml) que contiene la configuración del job, insertando el contenido del Jenkinsfile.
    - name: Renderizar configuración del job en Jenkins
      template:
        src: /tmp/job_config.xml.j2
        dest: /tmp/job_config.xml
      vars:
        jenkinsfile_content: "{{ jenkinsfile_content }}"

    # Llama a la API de Jenkins para crear el job de pipeline usando la configuración XML generada.
    # Se obtiene primero el 'crumb' de Jenkins para superar la protección CSRF (si está habilitada).
    - name: Crear job pipeline en Jenkins
      shell: |
        # Obtener crumb de Jenkins (suponiendo que CSRF está activado)
        CRUMB=$(curl -s 'http://localhost:8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')
        # Llama a la API de Jenkins para crear el job, enviando la configuración XML
        curl -X POST "http://localhost:8080/createItem?name={{ job_name }}" \
          -H "$CRUMB" \
          -H "Content-Type: application/xml" \
          --data-binary @/tmp/job_config.xml
      args:
        executable: /bin/bash
